Sudoku Solver Essay
Helen Wang

In my opinion, intelligence means to have or, in software’s case, show the ability to be able to make decisions based on the environment to complete some goal. Though my software solves the sudoku problem very differently to what a real human will normally do, it exhibits some sort of intelligent by being able to solve randomly generated puzzles. It’s ability to perform depending on unknown inputs and complete tasks makes it intelligent. Although we can’t really say that the computer “think” during the process, it does performs logical steps according to some internal logic.

Unlike how a human solver will do, my sudoku solver software starts at the upper left block of the game board. Then, like how a human spot for empty blocks, the software scan through the board and created a tracker board, which is also a 2d array, that has 0’s on block with numbers and -1’s on empty blocks. We can see this process as the program is reading the puzzle and according to what it gets, visions a picture of 0’s and -1’s that shows all the blocks that needs to be filled. 

Then the software start putting numbers into the blocks. It starts with the first blank block, or in the program’s “eye”, the first -1 starting from the upper left block. Then according to the rule of the game, tries numbers starting at 1. For each number, the computer will look at the row, column, and “square”, the 3 x 3 sub square, of this space. If this number satisfies the constrain: only 1 number from 1 to 9 in each row, column and square, then it will put this number into the block and go to the next. This process is similar to the thinking process a human will make, choose a space, try some numbers while considering the constraint. Though not very exactly, since in my case I prefer to look at the row, column and square first and then consider the possible numbers of the space.

When a human solver enters a number into a square, with confidence that it is correct, one will then view the entered number as a given number of the puzzle and solve the new, easier puzzle. Similar process is taken in the software’s case too. After entering the chosen number into the board 2d array, just like one might write a number into the blank space, the program then recursively calls to solve the new puzzle generated by this action. The same process is taken, until the whole puzzle is solved, or very likely, that it founds that the number it chooses, though did meet all the constraints, does not solve the whole problem. So the software will backtrack, which means going to the last block and choose the other alternatives. This at least reflects what I’ll do when I can’t find a number that I’m sure of. I will choose a number that meet the constraints, then continue solving with this input while tracking all the numbers I entered after the guess, then if I meet a conflict I’ll go back to the guessed block and choose the other ones instead. Since in the programs case it actually sort of “guesses” all its inputs, it will simply go to the last step, choose different number, if can’t solve, go back another step… Thus, in some case the sudoku solver software is acting like a human with very good memory and terrible strategy. Thus, it shows good amount of intelligence. 
